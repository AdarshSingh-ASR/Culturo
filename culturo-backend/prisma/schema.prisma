// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  interface = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  clerk_id          String?  @unique @map("clerk_id")
  email             String?  @unique
  username          String?  @unique
  first_name        String?
  last_name         String?
  full_name         String?
  profile_image_url String?
  is_active         Boolean  @default(true)
  is_verified       Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  trips      Trip[]
  stories    Story[]
  analytics  Analytics[]
  preferences UserPreference?

  @@map("users")
}

model UserPreference {
  id                String   @id @default(cuid())
  user_id           String   @unique
  cultural_tastes   Json?    // Store cultural preferences as JSON
  favorite_genres   String[] // Array of favorite genres
  dietary_restrictions String[] // Array of dietary restrictions
  travel_preferences Json?   // Store travel preferences as JSON
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Trip {
  id                String   @id @default(cuid())
  user_id           String
  title             String
  description       String?
  destination       String
  start_date        DateTime?
  end_date          DateTime?
  budget            Float?
  cultural_focus    String[] // Array of cultural interests
  itinerary         Json?    // Store itinerary as JSON
  status            TripStatus @default(PLANNED)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("trips")
}

model Story {
  id                String   @id @default(cuid())
  user_id           String
  title             String
  content           String
  genre             String?
  target_audience   String?
  cultural_context  Json?    // Store cultural context as JSON
  ai_generated      Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("stories")
}

model Analytics {
  id                String   @id @default(cuid())
  user_id           String
  event_type        String   // e.g., 'page_view', 'api_call', 'recommendation_click'
  event_data        Json?    // Store event data as JSON
  session_id        String?
  user_agent        String?
  ip_address        String?
  created_at        DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model FoodAnalysis {
  id                String   @id @default(cuid())
  user_id           String?
  image_url         String?
  food_name         String
  confidence        Float
  nutritional_info  Json?    // Store nutritional information as JSON
  cultural_context  Json?    // Store cultural context as JSON
  created_at        DateTime @default(now())

  @@map("food_analyses")
}

model TrendAnalysis {
  id                String   @id @default(cuid())
  category          String   // e.g., 'music', 'fashion', 'food'
  trend_data        Json     // Store trend analysis data as JSON
  confidence_score  Float
  created_at        DateTime @default(now())

  @@map("trend_analyses")
}

model Recommendation {
  id                String   @id @default(cuid())
  user_id           String?
  category          String   // e.g., 'music', 'food', 'travel'
  recommendation_data Json   // Store recommendation data as JSON
  score             Float
  created_at        DateTime @default(now())

  @@map("recommendations")
}

enum TripStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 